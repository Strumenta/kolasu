plugins {
    id 'org.jetbrains.kotlin.jvm'
    id "maven-publish"
    id "signing"
    id "org.jetbrains.dokka"
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = "$jvm_version"
    targetCompatibility = "$jvm_version"
    registerFeature('cli') {
        usingSourceSet(sourceSets.main)
    }
}


def completeKspVersion = kspVersion.contains("-") ? kspVersion : "${kotlin_version}-${kspVersion}"
def isReleaseVersion = !version.toString().endsWith("SNAPSHOT")

dependencies {
    implementation "com.google.devtools.ksp:symbol-processing-api:${completeKspVersion}"
    implementation(project(":core"))
}

publishing {

    repositories {
        maven {
            def releaseRepo = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://central.sonatype.com/repository/maven-snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('mavenCentralUsername') ? project.findProperty('mavenCentralUsername') : "Unknown user"
                password = project.hasProperty('mavenCentralPassword') ? project.findProperty('mavenCentralPassword') : "Unknown password"
            }
        }
    }

    publications {
        kolasu_lionweb_ksp(MavenPublication) {
            from components.java
            artifactId "kolasu-" + project.name
            artifact sourcesJar
            artifact javadocJar
            suppressPomMetadataWarningsFor('cliApiElements')
            suppressPomMetadataWarningsFor('cliRuntimeElements')
            pom {
                name = "kolasu-" + project.name
                description = "Kolasu classes generation for LIonWeb"
                version = project.version
                packaging = 'jar'
                url = 'https://github.com/Strumenta/kolasu'

                scm {
                    connection = 'scm:git:https://github.com/Strumenta/kolasu.git'
                    developerConnection = 'scm:git:git@github.com:Strumenta/kolasu.git'
                    url = 'https://github.com/Strumenta/kolasu.git'
                }

                licenses {
                    license {
                        name = 'Apache Licenve V2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'ftomassetti'
                        name = 'Federico Tomassetti'
                        email = 'federico@strumenta.com'
                    }
                    developer {
                        id = 'alessiostalla'
                        name = 'Alessio Stalla'
                        email = 'alessio.stalla@strumenta.com'
                    }
                    developer {
                        id = 'lorenzoaddazi'
                        name = 'Lorenzo Addazi'
                        email = 'lorenzo.addazi@strumenta.com'
                    }
                }

            }
        }
    }
}

signing {
    def key   = providers.gradleProperty('signingInMemoryKey').orNull
    def keyId = providers.gradleProperty('signingInMemoryKeyId').orNull
    def pass  = providers.gradleProperty('signingInMemoryKeyPassword').orNull

    if (key) {
        useInMemoryPgpKeys(keyId, key, pass)
        sign publishing.publications
    } else {
        logger.lifecycle('No in-memory signing key configured; skipping signing.')
    }
}

tasks.findByName("dokkaJavadoc").dependsOn(":core:compileKotlin")

