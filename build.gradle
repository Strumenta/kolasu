import org.jetbrains.dokka.gradle.DokkaTask

plugins {
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id "org.jlleitschuh.gradle.ktlint" version "10.3.0"
    id("maven-publish")
    id("idea")
    id("signing")
    id("org.jetbrains.dokka") version "${kotlin_version}"
    id 'java-library'
}

allprojects {
    project.group = "com.strumenta.kolasu"
    project.version = kolasu_version

    repositories {
        mavenLocal()
        mavenCentral()
    }

}

subprojects {

    tasks.withType(DokkaTask).configureEach {
        dokkaSourceSets {
            named("main") {
                includeNonPublic = true
                moduleName = "kolasu-" + moduleName.get()
                includes.from("README.md")
            }
        }
    }

    task javadocJar(type: Jar, dependsOn: ":${name}:dokkaJavadoc") {
        archiveClassifier = 'javadoc'
        from "$buildDir/dokka/javadoc"
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        // See https://discuss.gradle.org/t/why-subproject-sourceset-dirs-project-sourceset-dirs/7376/5
        // Without the closure, parent sources are used for children too
        from { sourceSets.main.allSource }
    }

    test {
        testLogging {
            showStandardStreams = true
            showExceptions = true
            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        }
    }

//    test {
//        testLogging {
//            exceptionFormat = 'FULL'
//            showCauses = true
//            showExceptions = true
//            showStackTraces = true
//            showStandardStreams = true
//
//            afterSuite { desc, result ->
//                println("desc ${desc}")
//                println("result ${result}")
//                if (!desc.parent) { // will match the outermost suite
//                    println "------------------------------------------------------------------------------------"
//                    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
//                    println "------------------------------------------------------------------------------------"
//                }
//            }
//            events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
//        }
//        outputs.upToDateWhen {false}
//    }

//    val jvmTest by getting(Test::class) {
//        testLogging {
//            events("PASSED", "FAILED", "SKIPPED")
//            exceptionFormat = TestExceptionFormat.FULL
//            showStandardStreams = true
//            showStackTraces = true
//        }
//    }

    tasks.withType(Test).all {
        testLogging {
            showStandardStreams = true
            showExceptions = true
            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        }
    }

    ktlint {
        version = "0.41.0"
        verbose = true
        outputToConsole = true
        enableExperimentalRules = true
        disabledRules = ["no-wildcard-imports", "experimental:argument-list-wrapping"]
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "${jvm_version}"
        }
    }

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }

    ktlint {
        disabledRules = ["no-wildcard-imports", "experimental:argument-list-wrapping"]
    }

}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
