buildscript {
    ext.kotlin_version = '1.3.50'
    ext.antlr_version = '4.7.2'

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jlleitschuh.gradle.ktlint" version "9.0.0"
    id("maven-publish")
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'maven'
apply plugin: 'idea'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

def kolasuVersion = "0.3.0-SNAPSHOT"

project.group   = "com.strumenta"
project.version = kolasuVersion

dependencies {
  antlr "org.antlr:antlr4:$antlr_version"
  compile "org.antlr:antlr4-runtime:$antlr_version"
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
  testCompile 'junit:junit:4.12'

  compile 'com.fifesoft:rsyntaxtextarea:2.5.8'
  compile 'com.fifesoft:autocomplete:2.5.8'
  compile 'com.github.salomonbrys.kotson:kotson:2.5.0'
  compile 'org.redundent:kotlin-xml-builder:1.5.3'
}

task version {
  doLast {
    print "Version ${kolasuVersion}"
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

artifacts {
    archives javadocJar, sourcesJar
  }

task generatePom {
  doLast {
    def generatedPom = pom {
      project {
        name project.name
        description "Framework to work with AST and building languages. Integrated with ANTLR."
        version kolasuVersion
        packaging 'jar'
        url 'https://github.com/Strumenta/kolasu'

        scm {
          connection 'scm:git:https://github.com/Strumenta/kolasu.git'
          developerConnection 'scm:git:git@github.com:Strumenta/kolasu.git'
          url 'https://github.com/Strumenta/kolasu.git'
        }

        licenses {
          license {
            name 'Apache Licenve V2.0'
            url 'https://www.apache.org/licenses/LICENSE-2.0'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id = 'ftomassetti'
            name = 'Federico Tomassetti'
            email = 'federico@tomassetti.me'
          }
        }
      }
    }
    generatedPom.writeTo("$buildDir/pom.xml")
  }
}

test {
  testLogging {
    exceptionFormat = 'full'
  }
}

ktlint {
    version = "0.35.0"
    verbose = true
    outputToConsole = true
    enableExperimentalRules = true
    disabledRules = ["no-wildcard-imports"]
}

generateTestGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'com.strumenta.simplelang']
    outputDirectory = new File("generated-test-src/antlr/main/com/strumenta/simplelang".toString())
}
compileKotlin.dependsOn generateGrammarSource
compileJava.dependsOn generateGrammarSource
sourceSets {
    generated {
        java.srcDir 'generated-test-src/antlr/main/'
    }
}
compileJava.source sourceSets.generated.java, sourceSets.main.java
compileKotlin.source sourceSets.generated.java, sourceSets.main.java, sourceSets.main.kotlin

clean{
    delete "generated-src"
}

ideaProject.dependsOn generateTestGrammarSource

idea {
    module {
        testSourceDirs += file("generated-test-src/antlr/main")
        generatedSourceDirs += file("generated-test-src/antlr/main")
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Strumenta/kolasu")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
