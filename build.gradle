import org.jetbrains.dokka.gradle.DokkaTask

plugins {
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    alias(libs.plugins.ktlint)
    id("maven-publish")
    id("idea")
    id("signing")
    id("org.jetbrains.dokka") version "${dokka_version}"
    id 'java-library'
    id 'net.researchgate.release' version '3.0.2'
}

allprojects {
    project.group = "com.strumenta.kolasu"
    project.version = version

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/"}
    }

}

subprojects {

    tasks.withType(DokkaTask).configureEach {
        dokkaSourceSets {
            named("main") {
                includeNonPublic = true
                moduleName = "kolasu-" + moduleName.get()
                includes.from("README.md")
            }
        }
    }

    task javadocJar(type: Jar, dependsOn: ":${name}:dokkaJavadoc") {
        archiveClassifier = 'javadoc'
        from "$buildDir/dokka/javadoc"
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        // See https://discuss.gradle.org/t/why-subproject-sourceset-dirs-project-sourceset-dirs/7376/5
        // Without the closure, parent sources are used for children too
        from { sourceSets.main.allSource }
    }

    tasks.withType(Test).all {
        testLogging {
            showStandardStreams = true
            showExceptions = true
            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        }
    }

    ktlint {
        version = "0.48.1"
        verbose = true
        outputToConsole = true
        enableExperimentalRules = true
        disabledRules = ["no-wildcard-imports", "experimental:argument-list-wrapping"]
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "${jvm_version}"
        }
    }

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }

    ktlint {
        disabledRules = ["no-wildcard-imports", "experimental:argument-list-wrapping"]
    }

    java {
        toolchain {
            def cleanVersion = jvm_version.startsWith("1.") ? jvm_version.substring("1.".length()) : jvm_version
            languageVersion.set(JavaLanguageVersion.of(cleanVersion))
        }
    }

    kotlin {
        jvmToolchain((jvm_version.startsWith("1.") ? jvm_version.substring("1.".length()) : jvm_version).toInteger())
    }

    java {
        sourceCompatibility = "$jvm_version"
        targetCompatibility = "$jvm_version"
        registerFeature('cli') {
            usingSourceSet(sourceSets.main)
        }
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

release {
    buildTasks = ['publish', ":lionweb-gen-gradle:publishPlugins"]
    git {
        requireBranch.set('')
        pushToRemote.set('origin')
    }
}

tasks.wrapper {
    gradleVersion = "8.2.1"
    distributionType = Wrapper.DistributionType.ALL
}