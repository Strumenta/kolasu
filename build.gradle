buildscript {
    ext.kotlin_version = '1.4.32'
    ext.antlr_version = '4.9.2'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jlleitschuh.gradle.ktlint" version "9.0.0"
    id("maven-publish")
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

def kolasuVersion = "1.1.2-SNAPSHOT"

project.group   = "com.strumenta"
project.version = kolasuVersion

dependencies {
  antlr "org.antlr:antlr4:$antlr_version"
  compile "org.antlr:antlr4-runtime:$antlr_version"
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
  implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: "$kotlin_version"
  testCompile 'junit:junit:4.12'

  compile 'com.fifesoft:rsyntaxtextarea:2.5.8'
  compile 'com.fifesoft:autocomplete:2.5.8'
  compile 'com.github.salomonbrys.kotson:kotson:2.5.0'
  compile 'org.redundent:kotlin-xml-builder:1.7.2'
  compile group: 'org.eclipse.emf', name: 'org.eclipse.emf.common', version: '2.21.0'
  compile group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore', version: '2.23.0'
  compile group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore.xmi', version: '2.16.0'
  compile group: 'org.emfjson', name: 'emfjson-jackson', version: '1.2.0'
}

task version {
  doLast {
    print "Version ${kolasuVersion}"
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

artifacts {
    archives javadocJar, sourcesJar
  }
//
//task generatePom {
//  doLast {
//    def generatedPom = pom {
//      project {
//        name project.name
//        description "Framework to work with AST and building languages. Integrated with ANTLR."
//        version kolasuVersion
//        packaging 'jar'
//        url 'https://github.com/Strumenta/kolasu'
//
//        scm {
//          connection 'scm:git:https://github.com/Strumenta/kolasu.git'
//          developerConnection 'scm:git:git@github.com:Strumenta/kolasu.git'
//          url 'https://github.com/Strumenta/kolasu.git'
//        }
//
//        licenses {
//          license {
//            name 'Apache Licenve V2.0'
//            url 'https://www.apache.org/licenses/LICENSE-2.0'
//            distribution 'repo'
//          }
//        }
//
//        developers {
//          developer {
//            id = 'ftomassetti'
//            name = 'Federico Tomassetti'
//            email = 'federico@strumenta.com'
//          }
//        }
//      }
//    }
//    generatedPom.writeTo("$buildDir/pom.xml")
//  }
//}

test {
  testLogging {
    exceptionFormat = 'full'
  }
}

ktlint {
    version = "0.35.0"
    verbose = true
    outputToConsole = true
    enableExperimentalRules = true
    disabledRules = ["import-ordering", "no-wildcard-imports"]
}

generateTestGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'com.strumenta.simplelang']
    outputDirectory = new File("generated-test-src/antlr/main/com/strumenta/simplelang".toString())
}
compileKotlin.dependsOn generateGrammarSource
compileJava.dependsOn generateGrammarSource
sourceSets {
    generatedTest {
        java.srcDir 'generated-test-src/antlr/main/'
    }
}

compileKotlin.source sourceSets.main.java, sourceSets.main.kotlin
compileJava.source sourceSets.generatedTest.java
compileTestKotlin.source sourceSets.test.kotlin

clean{
    delete "generated-src"
}

ideaProject.dependsOn generateTestGrammarSource
compileJava.dependsOn generateTestGrammarSource

idea {
    module {
        testSourceDirs += file("generated-test-src/antlr/main")
        generatedSourceDirs += file("generated-test-src/antlr/main")
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

publishing {

    repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }

    publications {
        kolasu(MavenPublication) {
            from(components.java)
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = project.name
                description = "Framework to work with AST and building languages. Integrated with ANTLR."
                version = kolasuVersion
                packaging = 'jar'
                url = 'https://github.com/Strumenta/kolasu'

                scm {
                    connection = 'scm:git:https://github.com/Strumenta/kolasu.git'
                    developerConnection = 'scm:git:git@github.com:Strumenta/kolasu.git'
                    url = 'https://github.com/Strumenta/kolasu.git'
                }

                licenses {
                    license {
                        name = 'Apache Licenve V2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'ftomassetti'
                        name = 'Federico Tomassetti'
                        email = 'federico@strumenta.com'
                    }
                    developer {
                        id = 'alessiostalla'
                        name = 'Alessio Stalla'
                        email = 'alessio.stalla@strumenta.com'
                    }
                }

            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


signing {
    sign publishing.publications.kolasu
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}