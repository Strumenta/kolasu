plugins {
    id 'org.jetbrains.kotlin.jvm'
    id "org.jlleitschuh.gradle.ktlint"
    id "maven-publish"
    id "signing"
    id "org.jetbrains.dokka"
}

java {
    sourceCompatibility = "$jvm_version"
    targetCompatibility = "$jvm_version"
    registerFeature('cli') {
        usingSourceSet(sourceSets.main)
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    cliImplementation "com.github.ajalt.clikt:clikt:$clikt_version"
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version")
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
    implementation("io.lionweb.lionweb-java:lionweb-java-core:$lionwebVersion")
    implementation("io.lionweb.lionweb-java:lionweb-java-emf:$lionwebVersion")
    api(project(":core"))
    api(project(":emf"))
    api(project(":lionweb"))


    implementation("com.squareup:kotlinpoet:1.14.2")
    cliImplementation "com.github.ajalt.clikt:clikt:$clikt_version"
    implementation("com.google.code.gson:gson:$gson_version") {
        version {
            strictly gson_version
        }
    }

    // We use the embeddable version because it avoids issues with conflicting versions of dependencies
    // that we have when using the normal one
    implementation("org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version")
}

publishing {

    repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }

    publications {
        kolasu_lionweb_gen(MavenPublication) {
            from components.java
            artifactId "kolasu-" + project.name
            artifact sourcesJar
            artifact javadocJar
            suppressPomMetadataWarningsFor('cliApiElements')
            suppressPomMetadataWarningsFor('cliRuntimeElements')
            pom {
                name = "kolasu-" + project.name
                description = "Kolasu classes generation for LIonWeb"
                version = project.version
                packaging = 'jar'
                url = 'https://github.com/Strumenta/kolasu'

                scm {
                    connection = 'scm:git:https://github.com/Strumenta/kolasu.git'
                    developerConnection = 'scm:git:git@github.com:Strumenta/kolasu.git'
                    url = 'https://github.com/Strumenta/kolasu.git'
                }

                licenses {
                    license {
                        name = 'Apache Licenve V2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'ftomassetti'
                        name = 'Federico Tomassetti'
                        email = 'federico@strumenta.com'
                    }
                    developer {
                        id = 'alessiostalla'
                        name = 'Alessio Stalla'
                        email = 'alessio.stalla@strumenta.com'
                    }
                    developer {
                        id = 'lorenzoaddazi'
                        name = 'Lorenzo Addazi'
                        email = 'lorenzo.addazi@strumenta.com'
                    }
                }

            }
        }
    }
}

signing {
    sign publishing.publications.kolasu_lionweb_gen
}

test {
    useJUnitPlatform()
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.google.code.gson') {
            details.useVersion gson_version
        }
    }
}

tasks.findByName("dokkaJavadoc").dependsOn(":core:compileKotlin")
tasks.findByName("dokkaJavadoc").dependsOn(":emf:compileKotlin")
tasks.findByName("dokkaJavadoc").dependsOn(":lionweb:jar")
