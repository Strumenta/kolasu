plugins {
    id("java-gradle-plugin")
    id 'org.jetbrains.kotlin.jvm'
    id("com.github.gmazzo.buildconfig") version "3.1.0"
    id("maven-publish")
    id("com.gradle.plugin-publish") version "1.2.0"
    id "org.jetbrains.dokka"
}

def completeKspVersion = kspVersion.contains("-") ? kspVersion : "${kotlinVersion}-${kspVersion}"

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation("io.lionweb.lioncore-java:lioncore-java-core:$lionwebVersion")
    api(project(":lionweb-gen"))
    testImplementation(project(":lionweb-ksp"))
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5:$kotlinVersion")
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
    implementation("com.google.code.gson:gson:$gson_version")
    implementation("com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:$completeKspVersion")
}

buildConfig {
    packageName("com.strumenta.kolasu.lionwebgen")
    buildConfigField("String", "PLUGIN_ID", "\"${lionwebGenGradlePluginID}\"")
    buildConfigField("String", "PLUGIN_GROUP", "\"${project.group}\"")
    buildConfigField("String", "PLUGIN_NAME", "\"${project.name}\"")
    buildConfigField("String", "PLUGIN_VERSION", "\"${project.version}\"")
    buildConfigField("String", "LIONCORE_VERSION", "\"${project.lionwebVersion}\"")
}

gradlePlugin {
    website.set("https://github.com/strumenta/kolasu")
    vcsUrl.set("https://github.com/strumenta/kolasu.git")
    plugins {
        create("lionwebGenGradlePlugin") {
            id = lionwebGenGradlePluginID as String
            displayName = "Kolasu LionWeb Gen"
            description = "Kolasu LionWeb Gen"
            tags.set(["parsing", "ast", "starlasu", "lionweb"])
            implementationClass = "com.strumenta.kolasu.lionwebgen.LionWebGradlePlugin"
        }
    }
}

tasks.named("compileKotlin") {
    dependsOn("generateBuildConfig")
}

test {
    useJUnitPlatform()
}

tasks.findByName("dokkaJavadoc").dependsOn("generateBuildConfig")
tasks.findByName("dokkaJavadoc").dependsOn(":core:compileKotlin")
tasks.findByName("dokkaJavadoc").dependsOn(":emf:compileKotlin")
tasks.findByName("dokkaJavadoc").dependsOn(":lionweb:jar")
tasks.findByName("dokkaJavadoc").dependsOn(":lionweb-gen:jar")

java {
    sourceCompatibility = "$jvm_version"
    targetCompatibility = "$jvm_version"
    registerFeature('cli') {
        usingSourceSet(sourceSets.main)
    }
}
